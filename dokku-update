#!/usr/bin/env bash
set -eo pipefail
shopt -s nullglob

if [[ -r /etc/default/dokku ]]; then
  # shellcheck disable=SC1091
  source /etc/default/dokku
fi

export DOKKU_ROOT=${DOKKU_ROOT:=~dokku}
if [[ -f "$DOKKU_ROOT/dokkurc" ]]; then
  if [[ -r $DOKKU_ROOT/dokkurc ]]; then
    # shellcheck disable=SC1090,SC1091
    source "$DOKKU_ROOT/dokkurc"
  else
    echo "Unable to read $DOKKU_ROOT/dokkurc for sourcing" 1>&2
    exit 1
  fi
fi
if [[ -d $DOKKU_ROOT/.dokkurc ]]; then
  # shellcheck disable=SC2231
  for f in $DOKKU_ROOT/.dokkurc/*; do
    if [[ -r "$f" ]]; then
      # shellcheck disable=SC1090
      source "$f"
    else
      echo "Unable to read $f for sourcing" 1>&2
      exit 1
    fi
  done
fi
[[ $DOKKU_TRACE ]] && set -x

export DOKKU_LIB_ROOT=${DOKKU_LIB_PATH:="/var/lib/dokku"}
export PLUGIN_PATH=${PLUGIN_PATH:="$DOKKU_LIB_ROOT/plugins"}
export PLUGIN_ENABLED_PATH=${PLUGIN_ENABLED_PATH:="$PLUGIN_PATH/enabled"}
export DEBIAN_FRONTEND=noninteractive
declare DOKKU_UPDATE_VERSION=""

dokku-log-info() {
  declare desc="log info formatter"
  echo "-----> $*"
}

dokku-log-verbose() {
  declare desc="log verbose formatter"
  echo "       $*"
}

dokku-log-warn() {
  declare desc="log warning formatter"
  echo " !     $*" 1>&2
}

dokku-update-plugin() {
  declare PLUGIN_NAME="$1"
  if [[ -d "$PLUGIN_ENABLED_PATH/$PLUGIN_NAME/.git" ]]; then
    dokku-log-verbose "Updating $PLUGIN_NAME"
    dokku plugin:update "$PLUGIN_NAME"
  fi
}

cmd-update-apt() {
  declare SYSTEM_UPDATES="$1"
  local packages

  apt-get update -qq >/dev/null

  if [[ "$SYSTEM_UPDATES" == true ]]; then
    apt-get -qq -y dist-upgrade
  else
    packages=("docker-image-labeler" "dokku" "dokku-event-listener" "dokku-update" "gliderlabs-sigil" "netrc" "nginx" "plugn" "procfile-util" "sshcommand")
    local OS_ARCH
    OS_ARCH="$(dpkg --print-architecture)"
    if [[ "$OS_ARCH" == "amd64" ]]; then
      packages+=("herokuish")
    fi

    apt-get -qq -y install --only-upgrade "${packages[@]}"
  fi
}

cmd-update-arch() {
  declare SYSTEM_UPDATES="$1"

  if [[ "$SYSTEM_UPDATES" == true ]]; then
    yay -Syyua
  else
    yay -Syu docker-image-labeler dokku nginx plugn sshcommand
  fi
}

cmd-update-opensuse() {
  declare SYSTEM_UPDATES="$1"

  zypper refresh

  if [ "$SYSTEM_UPDATES" == true ]; then
    zypper -n update
  else
    zypper -n update bind-utils cpio curl dos2unix docker-image-labeler git gliderlabs-sigil jq man-db nc netrc nginx plugn procfile-util sshcommand sudo unzip
  fi
}

cmd-update-yum() {
  declare SYSTEM_UPDATES="$1"

  if [ "$SYSTEM_UPDATES" == true ]; then
    yum -y update
  else
    yum -y update bind-utils cpio curl dos2unix docker-image-labeler git gliderlabs-sigil jq man-db nc netrc nginx plugn procfile-util sshcommand sudo unzip
  fi
}

cmd-run() {
  declare COMMAND="$1" PARAMETER="$2"
  local DOKKU_DISTRO PLUGIN_NAME REBUILD_APPS=true SYSTEM_UPDATES=false UPDATE_PLUGINS=true

  if [[ -f "/etc/os-release" ]]; then
    # shellcheck disable=SC1091
    DOKKU_DISTRO=$(. /etc/os-release && echo "$ID")
  fi

  local POSITIONAL_ARGS=()
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h | --help)
        cmd-help-run
        return
        ;;
      --skip-rebuild)
        REBUILD_APPS=false
        shift
        ;;
      --skip-plugins)
        UPDATE_PLUGINS=false
        shift
        ;;
      -s | --system-update)
        SYSTEM_UPDATES=true
        shift
        ;;
      -*)
        echo "Unknown option $1"
        exit 1
        ;;
      *)
        POSITIONAL_ARGS+=("$1")
        shift
        ;;
    esac
  done

  if [[ "$SYSTEM_UPDATES" == "true" ]]; then
    dokku-log-info "Running system updates"
  else
    dokku-log-info "Updating Dokku"
  fi

  case "$DOKKU_DISTRO" in
    arch)
      cmd-update-arch "$SYSTEM_UPDATES"
      ;;
    debian | ubuntu | raspbian)
      cmd-update-apt "$SYSTEM_UPDATES"
      ;;
    centos | rhel)
      cmd-update-yum "$SYSTEM_UPDATES"
      ;;
    opensuse)
      cmd-update-opensuse "$SYSTEM_UPDATES"
      ;;
    *)
      dokku-log-warn "Updating this operating system is not supported"
      exit 1
      ;;
  esac

  if [[ "$UPDATE_PLUGINS" == "true" ]]; then
    # update all plugins
    dokku-log-info "Updating all plugins"
    for PLUGIN_NAME in $(dokku plugin:list | grep enabled | awk '$1=$1' | cut -d' ' -f1); do
      dokku-update-plugin "$PLUGIN_NAME"
    done
    dokku plugin:install
  fi

  if [[ "$REBUILD_APPS" == "true" ]]; then
    # rebuild all applications
    dokku-log-info "Rebuilding all applications"
    dokku ps:rebuild --all

    dokku-log-info "Waiting for old containers to stop"
    sleep 120
  fi

  dokku cleanup --global
}

cmd-help-run() {
  local PROGRAM_NAME
  PROGRAM_NAME="$(basename "$0")"

  echo "Triggers the update process"
  echo
  echo "Usage: $PROGRAM_NAME run"
  echo "  Flags:"
  echo "    -h, --help"
  echo "      Returns this help output and exits"
  echo
  echo "    -s, --system-update"
  echo "      Applies system updates, potentially causing downtime if Docker is upgraded"
  echo
  echo "    --skip-plugins"
  echo "      Skips updating plugins"
  echo
  echo "    --skip-rebuild"
  echo "      Skips rebuilding apps"
  echo
}

cmd-help() {
  declare CMD="$1"
  local PROGRAM_NAME
  PROGRAM_NAME="$(basename "$0")"

  if [[ "$CMD" == "run" ]]; then
    cmd-help-run
    return
  fi

  if [[ "$CMD" == "version" ]]; then
    echo "Prints version of $PROGRAM_NAME"
    echo
    echo "Usage: $PROGRAM_NAME version"
    echo
    return
  fi

  echo "Updates Dokku & its dependencies, all enabled plugins and rebuilds all Dokku apps. Optionally installs all other system updates."
  echo
  echo "Usage: $PROGRAM_NAME [run|version]"
  echo "  Commands:"
  echo "    version    Prints version of $PROGRAM_NAME"
  echo "    run        Triggers the update process; when invoked with optional -s argument, all system updates will be installed"
  echo
}

cmd-version() {
  declare desc="Shows version"
  echo "dokku-update ${DOKKU_UPDATE_VERSION}"
}

main() {
  declare COMMAND="$1"

  case "${COMMAND}" in
    run)
      cmd-run "$@"
      ;;
    version | -v | --version)
      cmd-version
      ;;
    help | -h | --help)
      shift
      cmd-help "$@"
      ;;
    *)
      echo " ! Invalid command specified" 1>&2
      echo ""
      cmd-help
      return 1
      ;;
  esac
}

main "$@"
