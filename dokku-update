#!/usr/bin/env bash
set -eo pipefail
shopt -s nullglob

if [[ -r /etc/default/dokku ]]; then
  # shellcheck disable=SC1091
  source /etc/default/dokku
fi

export DOKKU_ROOT=${DOKKU_ROOT:=~dokku}
if [[ -f "$DOKKU_ROOT/dokkurc" ]]; then
  if [[ -r $DOKKU_ROOT/dokkurc ]]; then
    # shellcheck disable=SC1090,SC1091
    source "$DOKKU_ROOT/dokkurc"
  else
    echo "Unable to read $DOKKU_ROOT/dokkurc for sourcing" 1>&2
    exit 1
  fi
fi
if [[ -d $DOKKU_ROOT/.dokkurc ]]; then
  # shellcheck disable=SC2231
  for f in $DOKKU_ROOT/.dokkurc/*; do
    if [[ -r "$f" ]]; then
      # shellcheck disable=SC1090
      source "$f"
    else
      echo "Unable to read $f for sourcing" 1>&2
      exit 1
    fi
  done
fi
[[ $DOKKU_TRACE ]] && set -x

export DOKKU_LIB_ROOT=${DOKKU_LIB_PATH:="/var/lib/dokku"}
export PLUGIN_PATH=${PLUGIN_PATH:="$DOKKU_LIB_ROOT/plugins"}
export PLUGIN_ENABLED_PATH=${PLUGIN_ENABLED_PATH:="$PLUGIN_PATH/enabled"}
export DEBIAN_FRONTEND=noninteractive
declare DOKKU_UPDATE_VERSION=""

dokku-log-info() {
  declare desc="log info formatter"
  echo "-----> $*"
}

dokku-log-verbose() {
  declare desc="log verbose formatter"
  echo "       $*"
}

dokku-log-warn() {
  declare desc="log warning formatter"
  echo " !     $*" 1>&2
}

dokku-update-plugin() {
  declare PLUGIN_NAME="$1"
  if [[ -d "$PLUGIN_ENABLED_PATH/$PLUGIN_NAME/.git" ]]; then
    dokku-log-verbose "Updating $PLUGIN_NAME"
    dokku plugin:update "$PLUGIN_NAME"
  fi
}

run-update() {
  declare COMMAND="$1" PARAMETER="$2"
  local DOKKU_DISTRO PLUGIN_NAME PROGRAM_NAME SYSTEM_UPDATES VERSION
  PROGRAM_NAME="$(basename "$0")"

  if [[ -f "/etc/os-release" ]]; then
    # shellcheck disable=SC1091
    DOKKU_DISTRO=$(. /etc/os-release && echo "$ID")
  fi

  if [[ "$PARAMETER" == "-s" ]]; then
    dokku-log-info "Running system updates"
    SYSTEM_UPDATES=true
  else
    dokku-log-info "Updating Dokku"
    SYSTEM_UPDATES=false
  fi

  case "$DOKKU_DISTRO" in
    arch)
      if [ "$SYSTEM_UPDATES" == true ]; then
        yay -Syyua
      else
        yay -Syu docker-image-labeler dokku nginx plugn sshcommand
      fi
      ;;
    debian | ubuntu | raspbian)
      apt-get update -qq >/dev/null

      if [ "$SYSTEM_UPDATES" == true ]; then
        apt-get -qq -y dist-upgrade
      else
        apt-get -qq -y install --only-upgrade docker-image-labeler dokku dokku-event-listener dokku-update gliderlabs-sigil netrc nginx plugn procfile-util sshcommand
        local OS_ARCH
        OS_ARCH="$(dpkg --print-architecture)"
        if [[ "$OS_ARCH" == "amd64" ]]; then
          apt-get -qq -y install --only-upgrade herokuish
        fi
      fi
      ;;
    centos | rhel)
      if [ "$SYSTEM_UPDATES" == true ]; then
        yum -y update
      else
        yum -y update bind-utils cpio curl dos2unix docker-image-labeler git gliderlabs-sigil jq man-db nc netrc nginx plugn procfile-util sshcommand sudo unzip
      fi
      ;;
    opensuse)
      zypper refresh

      if [ "$SYSTEM_UPDATES" == true ]; then
        zypper -n update
      else
        zypper -n update bind-utils cpio curl dos2unix docker-image-labeler git gliderlabs-sigil jq man-db nc netrc nginx plugn procfile-util sshcommand sudo unzip
      fi
      ;;
    *)
      dokku-log-warn "Updating this operating system is not supported"
      exit 1
      ;;
  esac

  # update all plugins
  dokku-log-info "Updating all plugins"
  for PLUGIN_NAME in $(dokku plugin:list | grep enabled | awk '$1=$1' | cut -d' ' -f1); do
    dokku-update-plugin "$PLUGIN_NAME"
  done
  dokku plugin:install

  # rebuild all applications
  dokku-log-info "Rebuilding all applications"
  dokku ps:rebuild --all

  dokku-log-info "Waiting for old containers to stop"
  sleep 120
  dokku-log-info "Cleaning up"
  dokku cleanup --global
}

print-help() {
  echo "Updates Dokku & its dependencies, all enabled plugins and rebuilds all Dokku apps. Optionally installs all other system updates."
  echo
  echo "Usage: $PROGRAM_NAME [run|version]"
  echo "  Options:"
  echo "    version    Prints version of $PROGRAM_NAME"
  echo "    run        Triggers the update process; when invoked with optional -s argument, all system updates will be installed"
}

print-version() {
  declare desc="Shows version"
  echo "dokku-update ${DOKKU_UPDATE_VERSION}"
}

main() {
  declare COMMAND="$1"

  case "${COMMAND}" in
    run)
      run-update "$@"
      ;;
    --version | version | -v)
      print-version
      ;;
    *)
      print-help
      ;;
  esac
}

main "$@"
